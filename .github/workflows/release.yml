name: release

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'
  workflow_dispatch:

env:
  BUILD_PROFILE: release

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          VERSION_FILE="include/public/version.h"
          MAJOR=$(grep -E "#define ORUS_VERSION_MAJOR" "$VERSION_FILE" | awk '{print $3}')
          MINOR=$(grep -E "#define ORUS_VERSION_MINOR" "$VERSION_FILE" | awk '{print $3}')
          PATCH=$(grep -E "#define ORUS_VERSION_PATCH" "$VERSION_FILE" | awk '{print $3}')
          VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "Repository version: ${VERSION}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Determine trigger type
        id: trigger
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "from_tag=true" >> "$GITHUB_OUTPUT"
          else
            echo "from_tag=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Detect version change
        id: version_changed
        if: steps.trigger.outputs.from_tag == 'false'
        env:
          PREVIOUS_SHA: ${{ github.event.before }}
        run: |
          set -euo pipefail

          VERSION_FILE="include/public/version.h"
          if [[ -n "${PREVIOUS_SHA}" && "${PREVIOUS_SHA}" != "0000000000000000000000000000000000000000" ]]; then
            if git diff --quiet "${PREVIOUS_SHA}" "${GITHUB_SHA}" -- "$VERSION_FILE"; then
              echo "Version file unchanged between ${PREVIOUS_SHA} and ${GITHUB_SHA}."
              echo "changed=false" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi

          echo "Version file changed; release will be created."
          echo "changed=true" >> "$GITHUB_OUTPUT"

      - name: Decide if release is required
        id: release_needed
        env:
          FROM_TAG: ${{ steps.trigger.outputs.from_tag }}
          VERSION_CHANGED: ${{ steps.version_changed.outputs.changed }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          set -euo pipefail

          ref_name="${GITHUB_REF}"
          default_branch="refs/heads/${DEFAULT_BRANCH:-main}"

          if [[ "${FROM_TAG}" == "true" ]]; then
            echo "Release triggered by tag push ${ref_name}."
            echo "should_release=true" >> "$GITHUB_OUTPUT"
            echo "reason=tag" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [[ "${ref_name}" != "${default_branch}" ]]; then
            echo "Push to ${ref_name} does not match default branch ${default_branch}; skipping release."
            echo "should_release=false" >> "$GITHUB_OUTPUT"
            echo "reason=non_default_branch" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [[ "${VERSION_CHANGED}" == "true" ]]; then
            echo "Version change detected on default branch; release required."
            echo "should_release=true" >> "$GITHUB_OUTPUT"
            echo "reason=version_change" >> "$GITHUB_OUTPUT"
          else
            echo "No version change detected; skipping release."
            echo "should_release=false" >> "$GITHUB_OUTPUT"
            echo "reason=unchanged" >> "$GITHUB_OUTPUT"
          fi

      - name: Validate tag matches version
        if: steps.release_needed.outputs.should_release == 'true' && steps.trigger.outputs.from_tag == 'true'
        run: |
          TAG="${GITHUB_REF##*/}"
          VERSION="${{ steps.version.outputs.version }}"
          if [[ "$TAG" != "$VERSION" ]]; then
            echo "Tag $TAG does not match version macros ($VERSION)." >&2
            exit 1
          fi

      - name: Create version tag
        if: steps.release_needed.outputs.should_release == 'true' && steps.trigger.outputs.from_tag == 'false'
        env:
          TAG_NAME: ${{ steps.version.outputs.version }}
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag ${TAG_NAME} already exists locally."
          else
            git tag "$TAG_NAME" "$GITHUB_SHA"
          fi

          echo "Pushing tag ${TAG_NAME} to origin."
          git push origin "$TAG_NAME"

      - name: Build release artifacts
        if: steps.release_needed.outputs.should_release == 'true'
        run: |
          make clean
          make release

      - name: Check for binary changes
        if: steps.release_needed.outputs.should_release == 'true'
        env:
          TAG_NAME: ${{ steps.version.outputs.version }}
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          shopt -s nullglob
          artifact_pattern="dist/orus-*.tar.gz"
          new_artifacts=(${artifact_pattern})
          shopt -u nullglob

          if [[ ${#new_artifacts[@]} -eq 0 ]]; then
            echo "No build artifacts found matching ${artifact_pattern}" >&2
            exit 1
          fi

          api_url="https://api.github.com/repos/${GH_REPO}/releases/latest"
          status=$(curl -sS -o latest.json -w "%{http_code}" -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" "$api_url")

          if [[ "$status" != "200" ]]; then
            echo "No previous release found (status ${status}); skipping binary comparison."
            rm -f latest.json
            exit 0
          fi

          prev_tag=$(jq -r '.tag_name' latest.json)
          if [[ "$prev_tag" == "$TAG_NAME" ]]; then
            echo "Latest release already uses tag ${TAG_NAME}; skipping binary comparison."
            rm -f latest.json
            exit 0
          fi

          declare -A previous_hashes
          while read -r asset_name && read -r asset_url; do
            tmp_file=$(mktemp)
            curl -sSL -H "Authorization: Bearer ${GH_TOKEN}" -o "$tmp_file" "$asset_url"
            previous_hashes["$asset_name"]=$(sha256sum "$tmp_file" | awk '{print $1}')
            rm -f "$tmp_file"
          done < <(jq -r '.assets[] | select(.name | test("^orus-.*\\.tar\\.gz$")) | .name + "\n" + .browser_download_url' latest.json)

          rm -f latest.json

          if [[ ${#previous_hashes[@]} -eq 0 ]]; then
            echo "Previous release has no matching artifacts; skipping binary comparison."
            exit 0
          fi

          changed_artifacts=0
          for artifact in "${new_artifacts[@]}"; do
            artifact_name=$(basename "$artifact")
            new_hash=$(sha256sum "$artifact" | awk '{print $1}')
            old_hash=${previous_hashes["$artifact_name"]:-}
            if [[ -z "$old_hash" ]]; then
              echo "No previous artifact named ${artifact_name}; treating as changed."
              changed_artifacts=$((changed_artifacts + 1))
              continue
            fi

            if [[ "$new_hash" != "$old_hash" ]]; then
              echo "Artifact ${artifact_name} changed (sha256 ${old_hash} -> ${new_hash})."
              changed_artifacts=$((changed_artifacts + 1))
            else
              echo "Artifact ${artifact_name} is unchanged compared to latest release." >&2
            fi
          done

          if [[ $changed_artifacts -eq 0 ]]; then
            echo "No release artifacts changed compared to latest release." >&2
            exit 1
          fi

      - name: Delete existing release (if any)
        if: steps.release_needed.outputs.should_release == 'true'
        env:
          TAG_NAME: ${{ steps.version.outputs.version }}
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          api_url="https://api.github.com/repos/${GH_REPO}/releases/tags/${TAG_NAME}"
          status=$(curl -sS -o response.json -w "%{http_code}" -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" "$api_url")
          if [[ "$status" == "200" ]]; then
            release_id=$(python -c "import json; import sys; data=json.load(open('response.json')); print(data.get('id',''))")
            if [[ -n "$release_id" ]]; then
              echo "Deleting existing release $release_id for ${TAG_NAME}"
              curl -sS -X DELETE -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/${GH_REPO}/releases/${release_id}" >/dev/null
            fi
          fi
          rm -f response.json

      - name: Create GitHub release
        if: steps.release_needed.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Orus ${{ steps.version.outputs.version }}
          generate_release_notes: true
          files: |
            dist/orus-*.tar.gz
          prerelease: false
          draft: false
          make_latest: true
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
