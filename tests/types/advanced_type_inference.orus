// Advanced Type Inference Test
// Tests the new Hindley-Milner type inference system

// Test 1: Basic type inference
x = 42          // Should infer i32
y = 3.14        // Should infer f64
z = true        // Should infer bool
name = "Orus"   // Should infer string

print("=== Basic Type Inference ===")
print("x =", x)
print("y =", y)
print("z =", z)
print("name =", name)

// Test 2: Arithmetic type inference
result1 = x + 10        // i32 + i32 -> i32
result2 = y * 2.0       // f64 * f64 -> f64
result3 = x * 2         // i32 * i32 -> i32

print("=== Arithmetic Type Inference ===")
print("result1 =", result1)
print("result2 =", result2)
print("result3 =", result3)

// Test 3: Comparison type inference
comp1 = x > 30          // i32 > i32 -> bool
comp2 = y < 5.0         // f64 < f64 -> bool
comp3 = name == "Orus"  // string == string -> bool

print("=== Comparison Type Inference ===")
print("comp1 =", comp1)
print("comp2 =", comp2)
print("comp3 =", comp3)

// Test 4: Complex expressions
complex1 = (x + 5) * 2      // (i32 + i32) * i32 -> i32
complex2 = (y - 1.0) / 2.0  // (f64 - f64) / f64 -> f64
complex3 = z and (x > 0)    // bool and (i32 > i32) -> bool

print("=== Complex Expression Inference ===")
print("complex1 =", complex1)
print("complex2 =", complex2)
print("complex3 =", complex3)

// Test 5: Type unification in control flow
if x > 0:
    temp = x + 100    // Same type inference rules apply
    print("temp =", temp)

// Test 6: Type inference with loops
for i in 0..3:
    loop_var = i * 2  // Loop variable type inference
    print("loop_var =", loop_var)

print("=== Advanced Type Inference Test Complete ===")