// Validate runtime type inspection helpers typeof() and istype().
print("-- builtin type checks --")

enum Example:
    Unit
    Tuple(value: i32)

fn assert_type(value, expected: string):
    actual = typeof(value)
    if actual != expected:
        print("typeof mismatch for", expected, "got", actual)
        trigger = 1 / 0
    if not istype(value, expected):
        print("istype failed for", expected)
        trigger = 1 / 0
    if istype(value, "__no_match__"):
        print("istype false positive for", expected)
        trigger = 1 / 0
    if expected == actual:
        print(actual)
    else:
        print(expected, actual)

assert_type(true, "bool")
assert_type(42, "i32")

signed_i64: i64 = 9_223_372_036_854_775
assert_type(signed_i64, "i64")

small_u32: u32 = 123
assert_type(small_u32, "u32")

large_u64: u64 = 456
assert_type(large_u64, "u64")

float_value = 1.5
assert_type(float_value, "f64")

text = "hello"
assert_type(text, "string")

numbers = [1, 2, 3]
assert_type(numbers, "array")

example = Example.Unit
assert_type(example, "Example")

another = Example.Tuple(7)
assert_type(another, "Example")

nested = typeof(99)
assert_type(nested, "string")

if istype(42, "string"):
    print("unexpected numeric/string match")
    trigger = 1 / 0

try:
    mut empty: [i32] = []
    pop(empty)
catch err:
    assert_type(err, "value error Cannot pop from an empty array")


print("-- builtin type checks complete --")
