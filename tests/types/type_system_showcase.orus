// Type System Showcase
// Demonstrates the enhanced Hindley-Milner type system capabilities

print("=== Orus Enhanced Type System Showcase ===")
print()

// 1. Type Inference with Multiple Numeric Types
print("1. Multiple Numeric Types:")
a = 42i32       // Explicit i32
b = 1000i64     // Explicit i64
c = 3.14f64     // Explicit f64
d = 42          // Inferred i32
e = 3.14        // Inferred f64

print("a (i32) =", a)
print("b (i64) =", b)
print("c (f64) =", c)
print("d (inferred i32) =", d)
print("e (inferred f64) =", e)
print()

// 2. Type Unification in Expressions
print("2. Type Unification:")
result1 = a + d     // i32 + i32 -> i32
result2 = c * e     // f64 + f64 -> f64
result3 = a > d     // i32 > i32 -> bool

print("result1 (i32 + i32) =", result1)
print("result2 (f64 * f64) =", result2)
print("result3 (i32 > i32) =", result3)
print()

// 3. Type Inference in Control Flow
print("3. Control Flow Type Inference:")
if result3:
    temp_var = a * 2    // Type inferred from context
    print("temp_var =", temp_var)
    
for i in 0..3:
    squared = i * i     // Loop variable type inference
    print("squared =", squared)
print()

// 4. String Type Handling
print("4. String Type System:")
str1 = "Hello"
str2 = "World"
greeting = str1 + " " + str2
is_hello = str1 == "Hello"

print("str1 =", str1)
print("str2 =", str2)
print("greeting =", greeting)
print("is_hello =", is_hello)
print()

// 5. Boolean Type Operations
print("5. Boolean Type System:")
flag1 = true
flag2 = false
result_and = flag1 and flag2
result_or = flag1 or flag2
result_not = not flag1

print("flag1 =", flag1)
print("flag2 =", flag2)
print("result_and =", result_and)
print("result_or =", result_or)
print("result_not =", result_not)
print()

// 6. Complex Type Inference
print("6. Complex Type Inference:")
complex_expr = (a + d) * 2 > 100  // Same type comparison
nested_logic = (flag1 and result3) or (not flag2)

print("complex_expr =", complex_expr)
print("nested_logic =", nested_logic)
print()

// 7. Type Safety Demonstration
print("7. Type Safety in Action:")
safe_division = c / 2.0     // Safe f64 division
comparison = a < 100        // Safe comparison

print("safe_division =", safe_division)
print("comparison =", comparison)
print()

print("=== Type System Showcase Complete ===")
print("✅ All type inference and unification working correctly!")
print("✅ Arena-based memory management active")
print("✅ Union-find type variables for efficient processing")
print("✅ Algorithm W implementation providing robust type checking")