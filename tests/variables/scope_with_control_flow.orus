// Scope interaction with control flow statements
// Test how scoping works with if/else, break, continue

mut global_sum = 0
mut global_count = 0

print("=== Test 1: If statements inside loops (no new scope) ===")
for i in 1..5:
    if i % 2 == 0:
        mut even_var = i * 2  // This should be in the for loop scope
        print("Even number:", i, "doubled:", even_var)
    else:
        mut odd_var = i * 3   // This should be in the for loop scope
        print("Odd number:", i, "tripled:", odd_var)
    
    // Both even_var and odd_var should be accessible in same scope
    // Note: They may not be initialized depending on the path taken
    global_sum = global_sum + i

print("After loop with if/else, global_sum:", global_sum)

print("\n=== Test 2: Break and continue with scope ===")
for i in 1..10:
    mut loop_var = i * 10
    print("Loop var:", loop_var)
    
    if i == 3:
        print("Continuing at i =", i)
        continue
    
    if i == 7:
        print("Breaking at i =", i)
        break
    
    mut processed_var = loop_var + 100
    print("Processed var:", processed_var)
    global_count = global_count + 1

print("After loop with break/continue, global_count:", global_count)

print("\n=== Test 3: While loop with control flow ===")
mut while_var = 1
while while_var <= 5:
    mut iteration_var = while_var * 50
    print("While iteration:", while_var, "iteration_var:", iteration_var)
    
    if while_var == 3:
        while_var = while_var + 1
        continue
    
    global_sum = global_sum + iteration_var
    while_var = while_var + 1

print("=== Final Results ===")
print("Final global_sum:", global_sum)
print("Final global_count:", global_count)