// Variable lifetime and scope management test
// Variables should only exist within their declared scope

mut global_count = 0

// Test multiple for loops with same variable names
for i in 1..3:
    print("First loop i:", i)
    global_count = global_count + i

// i should not be accessible here
// print("i after first loop:", i)  // Should fail

for i in 10..12:
    print("Second loop i (different scope):", i)
    global_count = global_count + i

print("Global count after both loops:", global_count)

// Test nested scopes with variable creation and cleanup
for outer in 1..3:
    mut temp_var = outer * 10
    print("Outer loop, temp_var:", temp_var)
    
    for inner in 1..2:
        mut inner_temp = inner * 100
        print("  Inner loop, inner_temp:", inner_temp)
        print("  Inner can access temp_var:", temp_var)
    
    // inner_temp should not be accessible here
    // print("inner_temp in outer scope:", inner_temp)  // Should fail
    
    print("Still in outer, temp_var:", temp_var)

// Neither temp_var nor inner_temp should be accessible here
// print("temp_var outside:", temp_var)        // Should fail
// print("inner_temp outside:", inner_temp)    // Should fail

print("Test completed, global_count:", global_count)