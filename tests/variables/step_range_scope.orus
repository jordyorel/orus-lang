// Scope testing with step ranges and different loop patterns

mut base_value = 1000

print("=== Test 1: Basic step range scope ===")
for i in 0..10..2:  // Step by 2
    mut step_var = i * base_value
    print("Step range i:", i, "step_var:", step_var)

// i and step_var should not be accessible here

print("\n=== Test 2: Negative step range scope ===")
for countdown in 10..0..-2:  // Countdown by 2
    mut countdown_var = countdown + base_value
    print("Countdown:", countdown, "countdown_var:", countdown_var)

// countdown and countdown_var should not be accessible here

print("\n=== Test 3: Nested step ranges ===")
for outer in 1..5..2:  // 1, 3
    mut outer_step_var = outer * 100
    print("Outer step:", outer, "outer_step_var:", outer_step_var)
    
    for inner in 0..6..3:  // 0, 3
        mut inner_step_var = inner * 10
        print("  Inner step:", inner, "inner_step_var:", inner_step_var)
        print("  Can access outer_step_var:", outer_step_var)

// All loop variables should not be accessible here

print("\n=== Test 4: Step range with breaks and continues ===")
mut sum_value = 0
for i in 0..20..3:  // 0, 3, 6, 9, 12, 15, 18
    mut iteration_var = i + 5
    print("Step i:", i, "iteration_var:", iteration_var)
    
    if i == 6:
        print("Continuing at i =", i)
        continue
    
    if i == 15:
        print("Breaking at i =", i)
        break
    
    sum_value = sum_value + iteration_var

print("Final sum_value:", sum_value)

print("\n=== Test 5: Complex step range calculations ===")
for x in 2..20..4:  // 2, 6, 10, 14, 18
    mut calculation = x * x + base_value
    print("Complex calc x:", x, "result:", calculation)
    
    // Nested loop with fixed step (variable step not supported)
    for y in 1..x..2:  // Fixed step of 2
        mut nested_calc = y + calculation
        print("  Nested y:", y, "nested_calc:", nested_calc)

print("=== Step range scope tests completed ===")
print("Final base_value:", base_value)