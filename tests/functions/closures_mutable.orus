// Mutable closure test - modifying captured variables
fn make_accumulator(initial: i32) -> fn(i32) -> i32:
    mut total = initial
    fn add(value: i32) -> i32:
        total += value
        total
    add

acc1 = make_accumulator(0)
acc2 = make_accumulator(100)

// Removed print calls due to compilation issues
result1 = acc1(5)    // Should be 5
result2 = acc1(10)   // Should be 15
result3 = acc2(5)    // Should be 105
result4 = acc1(3)    // Should be 18

// Test closure with multiple mutable captures (simplified without tuples)
fn make_counter1() -> fn() -> i32:
    mut count1 = 0
    fn inc1() -> i32:
        count1 += 1
        count1
    inc1

fn make_counter2() -> fn() -> i32:
    mut count2 = 0
    fn inc2() -> i32:
        count2 += 1
        count2
    inc2

counter1 = make_counter1()
counter2 = make_counter2()
// Removed print calls due to compilation issues
r1 = counter1()  // Should be 1
r2 = counter2()  // Should be 1
r3 = counter1()  // Should be 2