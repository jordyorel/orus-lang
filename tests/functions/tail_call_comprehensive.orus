// Comprehensive tail call optimization test suite
// Testing various edge cases and scenarios

print("=== Comprehensive Tail Call Optimization Tests ===")

// Test 1: Simple tail recursive countdown
fn countdown(n: i32) -> i32:
    if n <= 0:
        0
    else:
        countdown(n - 1)

print("Test 1: Simple tail recursive countdown")
result1 = countdown(5000)
print("Countdown result:", result1)

// Test 2: Tail recursive with accumulator
fn sum_tail(n: i32, acc: i32) -> i32:
    if n <= 0:
        acc
    else:
        sum_tail(n - 1, acc + n)

print("Test 2: Tail recursive sum with accumulator")
result2 = sum_tail(100, 0)
print("Sum 1 to 100:", result2)

// Test 3: Tail recursive factorial
fn factorial_tail(n: i32, acc: i32) -> i32:
    if n <= 1:
        acc
    else:
        factorial_tail(n - 1, acc * n)

print("Test 3: Tail recursive factorial")
result3 = factorial_tail(10, 1)
print("Factorial of 10:", result3)

// Test 4: Tail recursive GCD (Euclidean algorithm)
fn gcd_tail(a: i32, b: i32) -> i32:
    if b == 0:
        a
    else:
        gcd_tail(b, a % b)

print("Test 4: Tail recursive GCD")
result4 = gcd_tail(48, 18)
print("GCD(48, 18):", result4)

// Test 5: Deep tail recursion test (would cause stack overflow without TCO)
fn deep_tail(n: i32) -> i32:
    if n <= 0:
        42
    else:
        deep_tail(n - 1)

print("Test 5: Deep tail recursion (10000 levels)")
result5 = deep_tail(10000)
print("Deep tail result:", result5)

// Test 6: Tail recursive with multiple parameters
fn complex_tail(a: i32, b: i32, c: i32) -> i32:
    if a <= 0:
        b + c
    else:
        complex_tail(a - 1, b + 1, c * 2)

print("Test 6: Complex tail recursion with multiple params")
result6 = complex_tail(5, 1, 1)
print("Complex tail result:", result6)

// Test 7: Tail recursive power function
fn power_tail(base: i32, exp: i32, acc: i32) -> i32:
    if exp <= 0:
        acc
    else:
        power_tail(base, exp - 1, acc * base)

print("Test 7: Tail recursive power")
result7 = power_tail(2, 8, 1)
print("2^8 =", result7)

// Test 8: Tail recursive Fibonacci
fn fib_tail(n: i32, a: i32, b: i32) -> i32:
    if n <= 0:
        a
    else:
        fib_tail(n - 1, b, a + b)

print("Test 8: Tail recursive Fibonacci")
result8 = fib_tail(20, 0, 1)
print("Fibonacci(20):", result8)

print("=== All tail call optimization tests completed successfully! ===")