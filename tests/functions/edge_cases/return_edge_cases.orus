// Edge cases for function returns

// Test 1: Early return in conditional
fn early_return(x: i32) -> i32:
    if x < 0:
        0
    else:
        x * 2

result1 = early_return(-5)
print("Early return negative:", result1)

result2 = early_return(5)
print("Early return positive:", result2)

// Test 2: Multiple return paths
fn multiple_returns(x: i32) -> i32:
    if x == 0:
        1
    elif x == 1:
        1
    else:
        x * 2

result3 = multiple_returns(0)
print("Multiple returns 0:", result3)

result4 = multiple_returns(5)
print("Multiple returns 5:", result4)

// Test 3: Nested function calls in return
fn nested_call_return(x: i32) -> i32:
    fn inner(y: i32) -> i32:
        y + 1
    
    inner(x) * 2

result5 = nested_call_return(3)
print("Nested call return:", result5)

// Test 4: Return with complex expression
fn complex_return(a: i32, b: i32) -> i32:
    (a + b) * (a - b) + (a * b)

result6 = complex_return(5, 3)
print("Complex return:", result6)

print("All return edge cases completed")