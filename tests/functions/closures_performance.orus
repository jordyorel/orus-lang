// Performance test for closures
// Test closure creation and invocation performance
fn make_simple_closure(x: i32) -> fn(i32) -> i32:
    fn add(y: i32) -> i32:
        x + y
    add

// Create some closures (simplified without arrays)
closure1 = make_simple_closure(1)
closure2 = make_simple_closure(2)
closure3 = make_simple_closure(3)

// Test closure invocation performance
mut total = 0
total += closure1(1)
total += closure2(1)
total += closure3(1)

// Removed print call due to compilation issues

// Test nested closure performance
fn make_nested_closure(a: i32) -> fn(i32) -> fn(i32) -> i32:
    fn level1(b: i32) -> fn(i32) -> i32:
        fn level2(c: i32) -> i32:
            a + b + c
        level2
    level1

nested = make_nested_closure(1)
mid = nested(2)
result = mid(3)
// Removed print call due to compilation issues

// Test closure with many captures
fn make_multi_capture(a: i32, b: i32, c: i32, d: i32, e: i32) -> fn() -> i32:
    fn sum() -> i32:
        a + b + c + d + e
    sum

multi = make_multi_capture(1, 2, 3, 4, 5)
// Removed print call due to compilation issues
result2 = multi()