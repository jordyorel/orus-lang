// LICM Edge Cases and Boundary Conditions Test
// Tests various edge cases for Loop Invariant Code Motion optimization

print("=== LICM Edge Cases Test Suite ===")

// Edge Case 1: Single iteration loop
print("\n--- Edge Case 1: Single Iteration Loop ---")
single_base = 100
mut single_total = 0

for i in 1..2:  // Only one iteration
    invariant_single = single_base * 5  // Should still be hoisted
    result_single = invariant_single + i
    single_total = single_total + result_single
    print("Single iteration:", i, "invariant =", invariant_single, "result =", result_single)

print("Single iteration total:", single_total)

// Edge Case 2: Zero iterations loop
print("\n--- Edge Case 2: Zero Iterations Loop ---")
zero_base = 200
mut zero_total = 0

for j in 5..5:  // Zero iterations
    invariant_zero = zero_base + 50  // Should be analyzed but not executed
    result_zero = invariant_zero + j
    zero_total = zero_total + result_zero
    print("This should not execute")

print("Zero iterations total (should be 0):", zero_total)

// Edge Case 3: Very small constants
print("\n--- Edge Case 3: Small Constants ---")
tiny1 = 1
tiny2 = 2
mut tiny_total = 0

for k in 1..3:
    // Very simple invariant expressions
    tiny_sum = tiny1 + tiny2        // Should be hoisted
    tiny_product = tiny1 * tiny2    // Should be hoisted
    tiny_result = tiny_sum + tiny_product + k
    tiny_total = tiny_total + tiny_result
    print("Iteration", k, ": sum =", tiny_sum, "product =", tiny_product)

print("Tiny constants total:", tiny_total)

// Edge Case 4: Large constants
print("\n--- Edge Case 4: Large Constants ---")
large1 = 1000000
large2 = 2000000
mut large_total = 0

for l in 1..3:
    // Large invariant expressions
    large_sum = large1 + large2      // Should be hoisted
    large_diff = large2 - large1     // Should be hoisted
    large_result = large_sum + large_diff + l
    large_total = large_total + large_result
    print("Iteration", l, ": sum =", large_sum, "diff =", large_diff)

print("Large constants total:", large_total)

// Edge Case 5: Negative numbers
print("\n--- Edge Case 5: Negative Numbers ---")
neg1 = -10
neg2 = -5
pos = 15
mut neg_total = 0

for m in 1..3:
    // Invariant expressions with negative numbers
    neg_sum = neg1 + neg2           // Should be hoisted
    neg_pos_mix = neg1 + pos        // Should be hoisted
    abs_like = pos + (-neg1)        // Should be hoisted
    
    neg_result = neg_sum + neg_pos_mix + abs_like + m
    neg_total = neg_total + neg_result
    print("Iteration", m, ": neg_sum =", neg_sum, 
          "mix =", neg_pos_mix, "abs_like =", abs_like)

print("Negative numbers total:", neg_total)

// Edge Case 6: Floating point precision
print("\n--- Edge Case 6: Floating Point Precision ---")
float1 = 1.5
float2 = 2.7
mut float_total = 0.0

for n in 1..3:
    // Floating point invariant expressions
    float_sum = float1 + float2      // Should be hoisted
    float_product = float1 * float2  // Should be hoisted
    float_division = float2 / float1 // Should be hoisted (expensive)
    
    float_result = float_sum + float_product + float_division + (n as f64)
    float_total = float_total + float_result
    print("Iteration", n, ": f_sum =", float_sum, 
          "f_product =", float_product, "f_div =", float_division)

print("Float precision total:", float_total)

// Edge Case 7: Boolean edge cases
print("\n--- Edge Case 7: Boolean Edge Cases ---")
always_true = true
always_false = false
mut bool_edge_total = 0

for o in 1..3:
    // Boolean invariant expressions
    true_and_false = always_true && always_false  // Should be hoisted (false)
    true_or_false = always_true || always_false   // Should be hoisted (true)
    not_true = !always_true                       // Should be hoisted (false)
    not_false = !always_false                     // Should be hoisted (true)
    
    // Convert to integers for calculation
    bool_sum = 0
    if true_or_false:
        bool_sum = bool_sum + 1
    if not_false:
        bool_sum = bool_sum + 1
    
    bool_edge_result = bool_sum + o
    bool_edge_total = bool_edge_total + bool_edge_result
    print("Iteration", o, ": true_or_false =", true_or_false,
          "not_false =", not_false, "sum =", bool_sum)

print("Boolean edge cases total:", bool_edge_total)

// Edge Case 8: Mixed type operations in invariant expressions
print("\n--- Edge Case 8: Mixed Type Operations ---")
int_base = 10
float_base = 3.5
mut mixed_total = 0.0

for p in 1..3:
    // Mixed type invariant expressions requiring casting
    int_to_float = (int_base as f64) + float_base    // Should be hoisted
    float_to_int = (float_base as i32) + int_base    // Should be hoisted
    
    mixed_result = int_to_float + (float_to_int as f64) + (p as f64)
    mixed_total = mixed_total + mixed_result
    print("Iteration", p, ": int_to_float =", int_to_float,
          "float_to_int =", float_to_int)

print("Mixed type operations total:", mixed_total)

// Edge Case 9: Complex nested expressions
print("\n--- Edge Case 9: Complex Nested Expressions ---")
a = 2
b = 3
c = 4
d = 5
mut complex_total = 0

for q in 1..3:
    // Deeply nested invariant expression
    nested_expr = ((a + b) * (c - d)) + ((a * c) - (b * d))  // Should be hoisted
    
    // Another level of nesting
    super_nested = nested_expr + ((a + c) * (b + d))         // Should be hoisted
    
    complex_result = super_nested + q
    complex_total = complex_total + complex_result
    print("Iteration", q, ": nested =", nested_expr,
          "super_nested =", super_nested)

print("Complex nested expressions total:", complex_total)

// Edge Case 10: String operations (if supported)
print("\n--- Edge Case 10: String Operations ---")
str_base = "Hello"
str_suffix = "World"
mut string_total = 0

for r in 1..3:
    // String concatenation is expensive and should be hoisted if invariant
    // Note: String operations may not be fully supported yet
    string_len = 5  // Simulate string length calculation
    string_result = string_len + r
    string_total = string_total + string_result
    print("Iteration", r, ": string_len =", string_len)

print("String operations total:", string_total)

print("\n=== LICM Edge Cases Complete ===")
print("All edge cases tested for invariant code motion optimization")