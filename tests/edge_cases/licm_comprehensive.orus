// Comprehensive Loop Invariant Code Motion (LICM) optimization tests
// Tests various scenarios where expressions can be hoisted out of loops

print("=== LICM Comprehensive Test Suite ===")

// Test 1: Basic invariant expression hoisting
print("\n--- Test 1: Basic Invariant Expression Hoisting ---")
x = 10
y = 20
mut total = 0

for i in 1..5:
    // These expressions are loop-invariant and should be hoisted
    constant_expr = x + y         // Should be hoisted (x + y is constant)
    complex_expr = x * y + 100   // Should be hoisted (complex but invariant)
    
    // This expression depends on loop variable and should NOT be hoisted
    loop_dependent = i * 2       // Should NOT be hoisted
    
    total = total + constant_expr + complex_expr + loop_dependent
    print("Iteration", i, ": constant =", constant_expr, 
          "complex =", complex_expr, "dependent =", loop_dependent)

print("Test 1 total:", total)

// Test 2: Expensive operations that benefit from hoisting
print("\n--- Test 2: Expensive Operations ---")
a = 15
b = 25
mut expensive_total = 0

for j in 1..4:
    // Division and modulo are expensive - should be hoisted if invariant
    expensive_div = a / 3        // Should be hoisted (expensive operation)
    expensive_mod = b % 7        // Should be hoisted (expensive operation)
    
    // Mixed expensive operations
    mixed_expensive = expensive_div + expensive_mod + j
    
    expensive_total = expensive_total + mixed_expensive
    print("Iteration", j, ": div =", expensive_div, 
          "mod =", expensive_mod, "mixed =", mixed_expensive)

print("Test 2 expensive total:", expensive_total)

// Test 3: Nested loops with multiple hoisting opportunities
print("\n--- Test 3: Nested Loops ---")
base = 50
multiplier = 3
mut nested_total = 0

for outer in 1..4:
    // This should be hoisted to outermost scope
    outer_invariant = base * multiplier
    
    for inner in 1..3:
        // This should be hoisted to outer loop scope
        inner_invariant = outer + 10
        
        // This depends on both loop variables
        combined = outer_invariant + inner_invariant + inner
        
        nested_total = nested_total + combined
        print("  Outer", outer, "Inner", inner, 
              ": outer_inv =", outer_invariant,
              "inner_inv =", inner_invariant, "combined =", combined)

print("Test 3 nested total:", nested_total)

// Test 4: Complex expressions with multiple variables
print("\n--- Test 4: Complex Expressions ---")
p = 7
q = 11
r = 13
mut complex_total = 0

for k in 1..4:
    // Complex invariant expression
    complex_invariant = (p * q) + (r / p) + (q % 4)
    
    // Expression mixing invariant and variant parts
    mixed_expression = complex_invariant + (k * 2)
    
    complex_total = complex_total + mixed_expression
    print("Iteration", k, ": complex_inv =", complex_invariant,
          "mixed =", mixed_expression)

print("Test 4 complex total:", complex_total)

// Test 5: Boolean invariant expressions
print("\n--- Test 5: Boolean Invariant Expressions ---")
flag1 = true
flag2 = false
value1 = 100
value2 = 200
mut bool_total = 0

for m in 1..4:
    // Boolean invariant expressions
    bool_invariant = flag1 && flag2  // Should be hoisted
    value_comparison = value1 > value2  // Should be hoisted
    
    // Conditional based on invariant
    conditional_value = 0
    if bool_invariant:
        conditional_value = 10
    else:
        conditional_value = 20
    
    // Mix with loop variable
    result = conditional_value + m
    bool_total = bool_total + result
    
    print("Iteration", m, ": bool_inv =", bool_invariant,
          "comparison =", value_comparison, "result =", result)

print("Test 5 boolean total:", bool_total)

// Test 6: Type casting invariant expressions
print("\n--- Test 6: Type Casting Invariants ---")
int_val = 42
float_val = 3.14
mut cast_total = 0

for n in 1..4:
    // Type casting invariant expressions
    cast_to_float = int_val as f64    // Should be hoisted
    cast_to_int = cast_to_float as i32  // Should be hoisted (chain)
    
    // String conversion (expensive)
    string_conv = int_val as string   // Should be hoisted (expensive)
    
    // Mix with loop variable
    loop_result = cast_to_int + n
    cast_total = cast_total + loop_result
    
    print("Iteration", n, ": cast_float =", cast_to_float,
          "cast_int =", cast_to_int, "result =", loop_result)

print("Test 6 casting total:", cast_total)

// Test 7: Edge case - multiple uses of same expression
print("\n--- Test 7: Multiple Uses of Same Expression ---")
edge_x = 5
edge_y = 8
mut multi_total = 0

for o in 1..4:
    // Same expression used multiple times - should be hoisted once
    repeated_expr = edge_x * edge_y + 15
    
    // Use the expression multiple times
    first_use = repeated_expr * 2
    second_use = repeated_expr + 10
    third_use = repeated_expr / 2
    
    // Combine with loop variable
    final_result = first_use + second_use + third_use + o
    multi_total = multi_total + final_result
    
    print("Iteration", o, ": repeated =", repeated_expr,
          "final =", final_result)

print("Test 7 multiple uses total:", multi_total)

print("\n=== LICM Test Suite Complete ===")
print("All invariant expressions should be optimized by LICM")