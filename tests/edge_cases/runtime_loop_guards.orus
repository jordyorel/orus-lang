// Test runtime loop guard mechanisms

// Test 1: Loop that should be guarded against infinite execution
mut counter = 0
while counter < 1000000:
    counter = counter + 1
    if counter > 100000:  // Safety check in case guards fail
        break
print("Completed large loop")

// Test 2: Nested loops with guards
for i in 0..1000:
    for j in 0..1000:
        if i * j > 10000:
            break

// Test 3: Loop with unpredictable termination condition
mut x = 42
while x != 1:
    if x % 2 == 0:
        x = x / 2
    else:
        x = 3 * x + 1
    // This is the Collatz conjecture - should eventually terminate
    // but compiler can't prove it

// Test 4: Loop that modifies its own condition in complex ways
mut a = 1
mut b = 1
while a < 1000:
    mut temp = a
    a = b
    b = temp + b
    // Fibonacci sequence - grows exponentially

// Test 5: Loop with external function calls (unpredictable)
/*
while someExternalFunction():
    doSomeWork()
*/

// Test 6: Very deep loop nesting
for a in 0..10:
    for b in 0..10:
        for c in 0..10:
            for d in 0..10:
                print(a + b + c + d)