// Edge cases for numeric types and arithmetic operations

// Test 1: Integer overflow boundaries (u32)
max_u32_minus_one = 4294967294u32
one_u32 = 1u32
print("Max u32 - 1:", max_u32_minus_one)
print("Adding 1:", max_u32_minus_one + one_u32)

// Test 2: Very large i64 values
large_positive = 9223372036854775806i64
large_negative = -9223372036854775807i64
print("Large i64:", large_positive)
print("Large negative i64:", large_negative)

// Test 3: Floating point edge cases
zero = 0.0
positive = 1.0
negative = -1.0

// Division by zero to create infinities
pos_inf = positive / zero
neg_inf = negative / zero
nan_val = zero / zero

print("Positive infinity:", pos_inf)
print("Negative infinity:", neg_inf)
print("NaN:", nan_val)

// Test 4: Very small and very large floating point numbers
tiny = 1e-100
huge = 1e100
print("Tiny:", tiny)
print("Huge:", huge)

// Test 5: Arithmetic with special floating point values
print("Inf + 1:", pos_inf + 1.0)
print("Inf - Inf:", pos_inf - pos_inf)
print("NaN == NaN:", nan_val == nan_val)

// Test 6: Mixed arithmetic that should maintain precision
pi = 3.141592653589793
e = 2.718281828459045
result = pi * e - 1.0
print("Pi * e - 1:", result)

// Test 7: Integer division edge cases
print("7 / 3:", 7 / 3)
print("8 / 4:", 8 / 4)
print("1 / 2:", 1 / 2)

// Test 8: Modulo with edge cases
print("10 % 3:", 10 % 3)
print("10 % 1:", 10 % 1)
print("0 % 5:", 0 % 5)

// Test 9: Type suffix consistency
val1 = 100u32
val2 = 200u32
val3 = 300u64
val4 = 400u64
print("u32 + u32:", val1 + val2)
print("u64 + u64:", val3 + val4)
