// Edge cases for error handling and recovery scenarios

// Test 1: Division edge cases (testing near-zero division)
divisor_test = 1
result1 = 100 / divisor_test
print("Division by 1:", result1)

small_divisor = 0.000001
large_number = 1000000.0
result2 = large_number / small_divisor
print("Large divided by very small:", result2)

// Test 2: Modulo edge cases
mod_by_one = 100 % 1
mod_self = 50 % 50
mod_larger = 25 % 100
print("Modulo edge cases:", mod_by_one, mod_self, mod_larger)

// Test 3: Overflow prevention testing
near_max_i32 = 2147483646
safe_add = near_max_i32 + 1    // Should be exactly max i32
print("Near max i32 + 1:", safe_add)

// Test 4: Underflow prevention testing
near_min_i32 = -2147483647
safe_sub = near_min_i32 - 1    // Should be exactly min i32
print("Near min i32 - 1:", safe_sub)

// Test 5: Boolean logic edge cases
always_true = true or false or false or false
always_false = false and true and true and true
mixed_logic = (true and false) or (false and true) or (true or false)
print("Logic edge cases:", always_true, always_false, mixed_logic)

// Test 6: String concatenation edge cases
empty_concat = "" + "test" + ""
space_concat = " " + "word" + " "
symbol_concat = "(" + "content" + ")"
print("String edge cases:", empty_concat, space_concat, symbol_concat)

// Test 7: Conditional edge cases with equality
zero_test = 0
if zero_test == 0:
    print("Zero equals zero")
else:
    print("Zero does not equal zero")

one_test = 1
if one_test != 0:
    print("One does not equal zero")
else:
    print("One equals zero")

// Test 8: Loop boundary error prevention
print("Testing loop boundaries:")
for safe_loop in 0..10:
    if safe_loop < 5:
        continue
    if safe_loop >= 8:
        break
    print("Safe loop value:", safe_loop)

// Test 9: Nested condition error handling
complex_test = 42
if complex_test > 0:
    if complex_test < 100:
        if complex_test % 2 == 0:
            print("Positive, under 100, even:", complex_test)
        else:
            print("Positive, under 100, odd:", complex_test)
    else:
        print("Positive, 100 or greater:", complex_test)
else:
    print("Zero or negative:", complex_test)

// Test 10: Variable scope error prevention
outer_error_test = 555
if true:
    inner_error_test = 333
    print("Inner scope access:", inner_error_test, outer_error_test)
print("Outer scope access:", outer_error_test)
// Note: inner_error_test should not be accessible here

// Test 11: Type consistency error prevention
consistent_i32_a = 10
consistent_i32_b = 20
consistent_result = consistent_i32_a + consistent_i32_b
print("Type consistent operation:", consistent_result)

consistent_f64_a = 10.5
consistent_f64_b = 20.7
consistent_f64_result = consistent_f64_a + consistent_f64_b
print("Float consistent operation:", consistent_f64_result)

// Test 12: Expression complexity error prevention
simple_expr = 1 + 2 + 3
medium_expr = (1 + 2) * (3 + 4) + (5 - 2)
complex_expr = ((1 + 2) * 3) + ((4 + 5) * 6) - ((7 + 8) / 3)
print("Expression complexity:", simple_expr, medium_expr, complex_expr)
