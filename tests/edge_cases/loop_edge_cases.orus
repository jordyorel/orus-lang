// Edge cases for loops and control flow

// Test 1: Empty ranges
print("Testing empty ranges:")
for i in 5..5:
    print("This should not print:", i)
for j in 10..5:
    print("This should not print either:", j)
print("Empty range tests complete")

// Test 2: Single iteration ranges
print("Single iteration:")
for k in 5..6:
    print("Single:", k)
for m in 0..1:
    print("Zero to one:", m)

// Test 3: Large step values
print("Large steps:")
for i in 0..10..5:
    print("Step 5:", i)
for j in 0..20..7:
    print("Step 7:", j)

// Test 4: Step larger than range
print("Step larger than range:")
for x in 0..3..10:
    print("Should only print once:", x)

// Test 5: Complex nested loops with break/continue
print("Nested loop control:")
for i in 0..3:
    for j in 0..3:
        print("Position:", i, j)

// Test 6: While loop with complex conditions
print("Complex while loop:")
mut counter = 0
mut flag = false
while counter < 10 and not flag:
    print("Counter:", counter)
    counter += 1
    if counter == 5:
        flag = true

// Test 7: Loop variable shadowing
print("Loop variable shadowing:")
outer_var = 999
for outer_var in 0..3:
    temp_var = 888
    for inner_var in 5..8:
        print("Inner loop:", outer_var, inner_var)
    print("After inner:", outer_var, temp_var)
print("Original outer_var:", outer_var)

// Test 8: Break and continue combinations
print("Break/continue combinations:")
for i in 0..10:
    if i == 7:
        break
    if i != 2:
        if i % 2 == 0:
            print("Even:", i)
        else:
            print("Odd:", i)

// Test 9: While with break in nested conditionals
print("While with nested break:")
mut value = 0
while value < 20:
    value += 1
    if value > 15:
        if value % 2 == 0:
            print("Breaking at even:", value)
            break
    if value <= 15:
        print("Value:", value)

// Test 10: Multiple loop types interaction
print("Multiple loop types:")
for outer in 0..3:
    mut inner_counter = 0
    while inner_counter < 2:
        for deep in 10..12:
            print("Triple nested:", outer, inner_counter, deep)
        inner_counter += 1

// Test 11: Range with same start and end values
print("Same start/end with different steps:")
for a in 5..5..1:
    print("5..5..1:", a)
for b in 5..5..2:
    print("5..5..2:", b)

// Test 12: Very small ranges
print("Very small ranges:")
for tiny in 0..2:
    print("Tiny:", tiny)
for mini in 1..3:
    print("Mini:", mini)
