// Basic algorithm implementations in Orus
// Factorial, Fibonacci sequence generation, GCD, linear search, and bubble sort examples.

fn factorial(n: i32) -> i64:
    if n < 0:
        print("factorial expects non-negative input")
    if n <= 1:
        return 1

    mut result: i64 = 1
    for value in 2..=n:
        result *= value as i64
    return result

fn fibonacci(count: i32):
    mut sequence: [i32] = []

    if count <= 0:
        return sequence

    push(sequence, 0)

    if count == 1:
        return sequence

    push(sequence, 1)

    mut previous = 0
    mut current = 1
    mut index = 2

    while index < count:
        next_value = previous + current
        push(sequence, next_value)
        previous = current
        current = next_value
        index += 1

    return sequence

fn gcd(a: i32, b: i32) -> i32:
    mut left = a
    mut right = b

    if left < 0:
        left = -left
    if right < 0:
        right = -right

    while right != 0:
        remainder = left % right
        left = right
        right = remainder

    return left

fn linear_search(values, target: i32) -> i32:
    mut index = 0
    for value in values:
        if value == target:
            return index
        index += 1

    return -1

fn bubble_sort(values):
    mut sorted: [i32] = []
    for value in values:
        push(sorted, value)

    mut length = len(sorted)
    if length <= 1:
        return sorted

    mut end = length
    while end > 1:
        mut swapped = false
        for i in 0..(end - 1):
            next_index = i + 1
            if sorted[i] > sorted[next_index]:
                temp = sorted[i]
                sorted[i] = sorted[next_index]
                sorted[next_index] = temp
                swapped = true
        if swapped == false:
            break
        end -= 1

    return sorted

print("factorial(5) ->", factorial(5))
print("factorial(10) ->", factorial(10))

print("fibonacci(1) ->", fibonacci(1))
print("fibonacci(7) ->", fibonacci(7))

print("gcd(54, 24) ->", gcd(54, 24))
print("gcd(20, 0) ->", gcd(20, 0))

numbers = [3, 1, 4, 1, 5]
print("numbers ->", numbers)
print("linear_search(numbers, 4) ->", linear_search(numbers, 4))
print("linear_search(numbers, 9) ->", linear_search(numbers, 9))

print("bubble_sort(numbers) ->", bubble_sort(numbers))
