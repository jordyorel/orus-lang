// Function call benchmark for Orus
// Tests function call overhead and tail call optimization

// Recursive factorial with tail call optimization
fn factorial_tail(n: i32, acc: i32) -> i32:
    if n <= 1:
        acc
    else:
        factorial_tail(n - 1, acc * n)

// Fibonacci with tail call optimization
fn fibonacci_tail(n: i32, a: i32, b: i32) -> i32:
    if n == 0:
        a
    else:
        fibonacci_tail(n - 1, b, a + b)

// Simple recursive countdown to test call overhead
fn countdown(n: i32) -> i32:
    if n <= 0:
        0
    else:
        countdown(n - 1)

// Nested function calls
fn nested_calls(n: i32) -> i32:
    fn level1(x: i32) -> i32:
        x + 1
    
    fn level2(x: i32) -> i32:
        level1(x) + 1
    
    fn level3(x: i32) -> i32:
        level2(x) + 1
    
    level3(n)

// Mathematical function with multiple operations
fn math_heavy(x: i32) -> i32:
    fn square(n: i32) -> i32:
        n * n
    
    fn cube(n: i32) -> i32:
        n * n * n
    
    square(x) + cube(x) + x

print("=== Orus Function Benchmark ===")

start_time = time_stamp()

// Test 1: Tail-recursive factorial
print("Test 1: Tail-recursive factorial")
result1 = factorial_tail(20, 1)
print("Factorial of 20:", result1)

// Test 2: Tail-recursive fibonacci
print("Test 2: Tail-recursive fibonacci")
result2 = fibonacci_tail(30, 0, 1)
print("Fibonacci of 30:", result2)

// Test 3: Simple recursive countdown
print("Test 3: Recursive countdown")
result3 = countdown(1000)
print("Countdown result:", result3)

// Test 4: Nested function calls
print("Test 4: Nested function calls")
mut total = 0
for i in 0..1000:
    total = total + nested_calls(i)
print("Nested calls total:", total)

// Test 5: Mathematical functions
print("Test 5: Mathematical functions")
mut math_total = 0
for i in 0..1000:
    math_total = math_total + math_heavy(i)
print("Math functions total:", math_total)

end_time = time_stamp()
duration = end_time - start_time
duration_ms = duration / 1000000

print("=== Benchmark Results ===")
print("Total time (nanoseconds):", duration)
print("Total time (milliseconds):", duration_ms)
print("Function benchmark completed")