// Phase 1 selection sort baseline for the algorithm stress-test suite (in-place, space efficient).
print("== Phase 1: Selection Sort (In-Place) Smoke ==")

fn selection_sort(label, values):
    length = len(values)
    mut pass_count = 0
    mut swap_count = 0

    if length <= 1:
        print("selection_sort", label, "passes:", pass_count, "swaps:", swap_count)
        return values

    for i in 0..length:
        pass_count = pass_count + 1
        mut min_index = i
        for j in (i + 1)..length:
            if values[j] < values[min_index]:
                min_index = j
        if min_index != i:
            temp = values[i]
            values[i] = values[min_index]
            values[min_index] = temp
            swap_count = swap_count + 1

    print("selection_sort", label, "passes:", pass_count, "swaps:", swap_count)
    return values


// === Tests ===

// Random input
unsorted = [64, 25, 12, 22, 11]
expected_unsorted = [11, 12, 22, 25, 64]
if assert_eq("selection_sort random", selection_sort("random", unsorted), expected_unsorted):
    print("ok", "selection_sort random")

// Already sorted
ascending = [1, 2, 3, 4, 5]
if assert_eq("selection_sort already_sorted", selection_sort("already_sorted", ascending), ascending):
    print("ok", "selection_sort already_sorted")

// Reversed
reversed = [9, 7, 5, 3, 1, -1]
expected_reversed = [-1, 1, 3, 5, 7, 9]
if assert_eq("selection_sort reversed", selection_sort("reversed", reversed), expected_reversed):
    print("ok", "selection_sort reversed")

// Duplicates
duplicates = [3, 1, 2, 3, 1]
expected_duplicates = [1, 1, 2, 3, 3]
if assert_eq("selection_sort duplicates", selection_sort("duplicates", duplicates), expected_duplicates):
    print("ok", "selection_sort duplicates")

// Single element
single = [42]
if assert_eq("selection_sort single", selection_sort("single", single), single):
    print("ok", "selection_sort single")
