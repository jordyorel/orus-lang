// Phase 1 bubble sort baseline for the algorithm stress-test suite (in-place).
print("== Phase 1: Bubble Sort (In-Place) Smoke ==")

fn bubble_sort(label, values):
    mut pass_count = 0
    mut comparison_count = 0
    mut swap_count = 0
    mut end = len(values)

    if end <= 1:
        print("bubble_sort", label, "passes:", pass_count, "comparisons:", comparison_count, "swaps:", swap_count)
        return values

    while end > 1:
        pass_count = pass_count + 1
        mut swapped = false
        for i in 0..(end - 1):
            next_index = i + 1
            comparison_count = comparison_count + 1
            if values[i] > values[next_index]:
                temp = values[i]
                values[i] = values[next_index]
                values[next_index] = temp
                swap_count = swap_count + 1
                swapped = true
        if swapped == false:
            break
        end = end - 1

    print("bubble_sort", label, "passes:", pass_count, "comparisons:", comparison_count, "swaps:", swap_count)
    return values

// === Tests ===
unsorted = [5, 1, 4, 2, 8, 0]
expected_unsorted = [0, 1, 2, 4, 5, 8]
if assert_eq("bubble_sort random", bubble_sort("random", unsorted), expected_unsorted):
    print("ok", "bubble_sort random")

ascending = [1, 2, 3, 4, 5]
if assert_eq("bubble_sort already_sorted", bubble_sort("already_sorted", ascending), ascending):
    print("ok", "bubble_sort already_sorted")

reversed = [9, 7, 5, 3, 1, -1]
expected_reversed = [-1, 1, 3, 5, 7, 9]
if assert_eq("bubble_sort reversed", bubble_sort("reversed", reversed), expected_reversed):
    print("ok", "bubble_sort reversed")

duplicates = [3, 1, 2, 3, 1]
expected_duplicates = [1, 1, 2, 3, 3]
if assert_eq("bubble_sort duplicates", bubble_sort("duplicates", duplicates), expected_duplicates):
    print("ok", "bubble_sort duplicates")

single = [42]
if assert_eq("bubble_sort single", bubble_sort("single", single), single):
    print("ok", "bubble_sort single")

empty: [i32] = []
if assert_eq("bubble_sort empty", bubble_sort("empty", empty), []):
    print("ok", "bubble_sort empty")
