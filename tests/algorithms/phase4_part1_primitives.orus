print("== Phase 4 Part 1: Primitive helpers ==")

mut RNG_SEED: i32 = 0x13579BDF

fn srand(seed: i32):
    RNG_SEED = seed

fn rand_u32() -> i32:
    RNG_SEED = (RNG_SEED * 1664525) + 1013904223
    return RNG_SEED

fn rand_range(lo: i32, hi: i32) -> i32:
    if hi <= lo:
        return lo
    span = hi - lo + 1
    r = rand_u32()
    mut m = r % span
    if m < 0:
        m = m + span
    return lo + m

fn rand_len(max_len: i32) -> i32:
    return rand_range(0, max_len)

fn copy_array(xs):
    mut out: [i32] = []
    mut i: i32 = 0
    while i < len(xs):
        push(out, xs[i])
        i = i + 1
    return out

fn concat(a, b):
    mut out: [i32] = []
    mut i: i32 = 0
    while i < len(a):
        push(out, a[i])
        i = i + 1
    i = 0
    while i < len(b):
        push(out, b[i])
        i = i + 1
    return out

fn add_k(xs, k: i32):
    mut out: [i32] = []
    mut i: i32 = 0
    while i < len(xs):
        push(out, xs[i] + k)
        i = i + 1
    return out

fn split_at(xs, mid: i32):
    mut left: [i32] = []
    mut right: [i32] = []
    mut i: i32 = 0
    while i < len(xs):
        if i < mid:
            push(left, xs[i])
        else:
            push(right, xs[i])
        i = i + 1
    mut parts: [[i32]] = []
    push(parts, left)
    push(parts, right)
    return parts

srand(1792609982)
rand_sample = rand_u32()
if assert_eq("phase4 primitives rand_u32", rand_sample, -1780324603):
    print("ok", "rand_u32", rand_sample)

range_sample = rand_range(-3, 3)
if assert_eq("phase4 primitives rand_range", range_sample, -2):
    print("ok", "rand_range", range_sample)

len_sample = rand_len(5)
if assert_eq("phase4 primitives rand_len", len_sample, 5):
    print("ok", "rand_len", len_sample)

copied = copy_array([1, 2, 3])
if assert_eq("phase4 primitives copy_array", copied, [1, 2, 3]):
    print("ok", "copy_array", copied)

concatenated = concat([1, 2], [3, 4])
if assert_eq("phase4 primitives concat", concatenated, [1, 1, 3, 3, 3, 3]):
    print("ok", "concat", concatenated)

incremented = add_k([1, -1, 5], 3)
if assert_eq("phase4 primitives add_k", incremented, [4, 2, 8]):
    print("ok", "add_k", incremented)

split_parts = split_at([1, 2, 3, 4], 2)
mut expected_split_left: [i32] = []
push(expected_split_left, 1)
push(expected_split_left, 2)
if assert_eq("phase4 primitives split left", split_parts[0], expected_split_left):
    print("ok", "split left", split_parts[0])
mut expected_split_right: [i32] = []
push(expected_split_right, 3)
push(expected_split_right, 4)
if assert_eq("phase4 primitives split right", split_parts[1], expected_split_right):
    print("ok", "split right", split_parts[1])

print("== Done Part 1 ==")
