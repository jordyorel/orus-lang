#ifndef ORUS_TYPED_AST_VISUALIZER_H
#define ORUS_TYPED_AST_VISUALIZER_H

#include "compiler/typed_ast.h"
#include <stdio.h>
#include <stdbool.h>

/*
 * Typed AST Visualizer for Orus Compiler
 * 
 * This module provides visualization tools for debugging typed AST
 * generated by HM type inference. It outputs tree-like representations
 * showing the structure, types, and metadata of AST nodes.
 * 
 * Features:
 * - Multiple output formats (standard, detailed, compact, colored)
 * - Configurable metadata display
 * - Source location information
 * - Terminal color support detection
 */

// Main visualization functions

/**
 * Visualize typed AST in standard format
 * @param root The root of the typed AST to visualize
 * @param output File stream to write to (e.g., stdout, stderr, or file)
 */
void visualize_typed_ast(TypedASTNode* root, FILE* output);

/**
 * Visualize typed AST with detailed information
 * @param root The root of the typed AST to visualize
 * @param output File stream to write to
 * @param show_metadata Whether to show optimization hints and register info
 * @param show_locations Whether to show source line/column information
 */
void visualize_typed_ast_detailed(TypedASTNode* root, FILE* output, bool show_metadata, bool show_locations);

/**
 * Visualize typed AST in compact format (minimal output)
 * @param root The root of the typed AST to visualize
 * @param output File stream to write to
 */
void visualize_typed_ast_compact(TypedASTNode* root, FILE* output);

/**
 * Visualize typed AST with color coding (if terminal supports it)
 * @param root The root of the typed AST to visualize
 * @param output File stream to write to
 */
void visualize_typed_ast_colored(TypedASTNode* root, FILE* output);

// Utility functions

/**
 * Check if the current terminal supports color output
 * @return true if colors are supported, false otherwise
 */
bool terminal_supports_color(void);

/**
 * Print statistics about the typed AST
 * @param root The root of the typed AST to analyze
 * @param output File stream to write statistics to
 */
void print_typed_ast_stats(TypedASTNode* root, FILE* output);

// Convenience macros for common use cases

/**
 * Visualize typed AST to stdout with default settings
 */
#define VISUALIZE_TYPED_AST(root) visualize_typed_ast((root), stdout)

/**
 * Visualize typed AST to stdout with colors if supported
 */
#define VISUALIZE_TYPED_AST_COLOR(root) \
    do { \
        if (terminal_supports_color()) { \
            visualize_typed_ast_colored((root), stdout); \
        } else { \
            visualize_typed_ast((root), stdout); \
        } \
    } while(0)

/**
 * Debug macro to visualize typed AST only in debug builds
 */
#ifdef DEBUG
#define DEBUG_VISUALIZE_TYPED_AST(root) VISUALIZE_TYPED_AST(root)
#else
#define DEBUG_VISUALIZE_TYPED_AST(root) ((void)0)
#endif

#endif // ORUS_TYPED_AST_VISUALIZER_H